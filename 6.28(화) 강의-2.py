# 6-2) 두가지 유형의 함수가 갖는 특징들
       # 1. 객체 안에 있는 함수 - 리스트/ 문자열/ .함수
       # 2. 객체 밖에 있는 함수 - len()
#1. 리스트, 문자열 -> 객체/ 리스트 객체안에 있는 건 리스트를 대상으로, 문자열 객체안에 있는건 문자열을 대상으로
#2. 무슨 값을 전하면 그값을 대상으로 일을 하는것       

# 6-3) 문자열과 함수들 / +)리스트는 변경가능하나, 문자열은 변경 불가 happy -> dappy 안됨/ 단, 문자열은 새로생성은 가능
str = "happy"
str.count("p")        # "p"가 몇번 등장? -> 2/ str이라는 객체에서 카운트라는 함수를 이용해 
str.count("pp")       # "pp"가 몇번 등장? -> 1

org = "heo"
lcp = org.lower()     # 모든 문자를 소문자로 바꿔서 변환
ucp = org.upper()     # 모든 문자를 대문자로 바꿔서 변환
org                   # 원본은 그대로 존재, 원본을 근거로 해서 새로운걸 만드는거 
lcp                   # -> 'heo'
ucp                   # -> 'HEO'

org = " middle "      # 아래내용은 객체가 3개만들어진거(원본, cp1, cp2)
cp1 = org.lstrip()    # 앞쪽에(왼쪽에) 있는 공백들 모두 제거
cp2 = org.rstrip()    # 뒤쪽에(오른쪽에) 있는 공백들 모두제거
org                   # ' middle '
cp1                   # 'middle '
cp2                   # ' middle'
cpy = org.strip()     # 양쪽 공백 모두 제거/ cpy ->'middle'
                      # 가운데 공백은 제거가 안된다. (앞,뒤,앞뒤공백만 됨)

rps = org.replace("oo","ee")  # "oo"를 전부 "ee"로 교체 / 앞에있는걸 뒤에있는걸로 교체해라
rps = org.replace("oo","ee", 1)  # 첫번째 "oo"를 "ee"로 교체 (왼쪽에서 시작해서 1개만 바꿔라)

org = "ab_cd_ef"
ret = org.split('_')   # '_'(인자)를 기준으로 문자열 쪼개서 리스트에 담아!/ 쪼개서 다시 돌려줘
ret                    # ['ab', 'cd', 'ef'] / 리스트에 담아서 반환해준다. 

str = "~~~~ is~~~~ is~~~~~"
str.find("is")    # "is"가 있는 위치의 인덱스 값은? -> 5 (index값의 순번/ 공백도 1나의 순번으로 친다.)
str.rfind("is")   # 마지막"is"가 있는 위치의 인덱스 값은? -> 6
# -1이 반환 되면 그런 값이 없다는것 ex) ^^를 찾아라 하면 -1 나옴

# 6-5) 이스케이프 문자
str = "escape\ncharacters"
print(str)        # escape\.... +)추가내용-> \n: 줄바꿈 \t: 탭 \': 작은따옴표출력 \": 큰따옴표출력

# 6-6) 함수가 아닌 del 명령 (3가지) - clear함수/ 슬라이싱 연산/ del함수 (삭제 명령은 슬라이싱 연산을 활용하는게 가장 파이썬 스럽다.)
st = [1, 2, 3, 4 ,5]
st.clear()
st                      # []/ 리스트의 모든 값 삭제

st = [1, 2, 3, 4, 5]
st[:] = []              # 왼쪽을 오른쪽 값으로 대체 하겠다./ 슬라이싱 연산/ clear보다 이게 더 나을듯
st                      # [] / 리스트 값 삭제 / *가장 파이썬 스러운 방법!*

st = [1, 2, 3, 4 ,5]
st[2:] = []             # 인덱스 2 이후로 전부 삭제 (특정부분만 지울때)
st                      # [1, 2]

st = [1, 2, 3, 4, 5]
del st[:]               # 오른쪽에서 명시한 만큼 삭제한다 / 리스트에 저장된 값 모두 삭제/ st[:] = st[0:-1]
st                      # []

st = [1, 2, 3, 4, 5]
del st[3:]             # st[3]부터 그뒤까지 모두 삭제
del st[0]              # st[0] 하나만 삭제
st                     # [2, 3]

st = [1, 2, 3, 4, 5]
del st                 # 리스트를 통째로 삭제! 리스트 자체를 아예 삭제!/ 빈리스트가 아니라 아예통째로 사라짐!
                       # del st[:] -> 이건 0~-1번째 까지 지워라가 되는데/ del st 하면 걍 변수 통째로 바바이