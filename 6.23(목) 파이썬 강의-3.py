#5-6) 리스트에서 n칸씩 뛰면서 저장된 값들 꺼내기
st = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
st1 = st[0:9:2]                 #st[0]~st[8]까지 2칸씩 뛰면서/ st[0:9:3] <- 인덱스0~8까지 3칸씩 뛰면서
print(st1)
print(st)

st[0:9:2] = [0, 0, 0, 0, 0]     # st[0:9:2] = [0, 0, 0] -> 이건 안됨
print(st)                       # st[0:9:2] = [0, 0, 0, 0, 0] -> 자리를 맞춰서 하면 이건 됨 

#5-7) 스트링형 데이터 - 문자열
"happy birthday to you"          # 큰따옴표로 묶은 문자열
'happy birthday to you'          # 작은따옴표로 묶은 문자열

#int형  3,5,7,9           정수
#float형 2.2, 3.4         실수
#리스트형 [1,2,3]                   대괄호로 묶어둔것/ 리스트형은 대입연산자에서 꺼내오고,저장이 가능 (변경가능)
#스트링형 "puppy is lovely"         하나이상의 문자를 큰따옴표로 묶어둔것 / 스트링형은 변경이 불가능 하다. 변경이 아니라 새로운 문자열이됨 (*속도와 효율성때문에 변경이 불가)

"hello" + "everybody"
'hello everybody'        # 변경이 아니라 새로운 문자열이 생성되는것 / 리스트형에서 가능한건 스트링형에서도 거의 가능

st3 = [1, 2, 3, 4, 5]
st3[2]                      # 3    -> 리스트형의 인덱싱 연산

str = "simple"
str[2]                      # 'm'  -> 리스트형 인덱싱연산은 문자열에서도 가능하다. 단 변경은 불가

str2 = "puppy"
str[0] = "d"                # duppy 변경 불가(문자열은 변경불가- 내용의 삭제, 추가안됨/ 새로추가되면 아예새로운 문자가됨) / 오류남

# 리스트/ 문자열의 for루프
for i in 'happy':
    print(i, end ='')       #h a p p y

for i in [1, 2, 3]:
    print(i, end ='')       # 1 2 3      #파이썬은 하나의 공백도 문자열로 인식한다

#5-9) 리스트와 문자열을 전달 받는 함수 len (길이값을 반환 하는 함수)
st5 = [1, 2, 3]  
len(st5)                    #답: 3  len = length = 길이

#5-10) 리스트와 문자열을 인자로 전달하고 반환하기
def so_simple2(st):
    print(st)
so_simple2([1, 3, 5])       # 답: [1, 3, 5]            함수는 실수,정수,문자 형이 있다

def so_simple3( ):
    st = [1, 2, 3, 4, 5]
    return st               # 리턴: 함수에서 명령으로 반환 하는것/ 함수 호출된 자리로 그값이 반환 된다.
r = so_simple3()            # 답: [1, 2, 3, 4, 5]      리스트도 반환이 된다.

def so_simple4(s):
    print(s)
    return "bye~"
r = so_simple4("hello")        #'hello' -> 저장된값은 hello가 맞음
print(r)                       #'bye~   -> 반환된값
   
